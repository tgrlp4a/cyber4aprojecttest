pipeline {
  agent any

  environment {
    APP_NAME = "cyber4aprojecttest"
    RELEASE = "1.0.0"
    DOCKER_USER = "theogrlp4a"
    DOCKER_PASS = credentials('docker-hub-credentials') // Utiliser Jenkins credentials store
    IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
    IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
  }

  stages {
    stage("Cleanup Workspace") {
      steps {
        cleanWs()
      }
    }

    stage("Checkout from SCM") {
      steps {
        git branch: 'main', credentialsId: 'github', url: 'https://github.com/tgrlp4a/cyber4aprojecttest.git'
      }
    }

    stage('Build Docker Image') {
      steps {
        script {
          sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} -t ${IMAGE_NAME}:latest ."
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
            sh "echo $PASS | docker login --username $USER --password-stdin"
            sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
            sh "docker push ${IMAGE_NAME}:latest"
            sh "docker logout"
          }
        }
      }
    }

    stage('Pull Image for Analysis') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
            sh "echo $PASS | docker login --username $USER --password-stdin"
            sh "docker pull ${IMAGE_NAME}:${IMAGE_TAG}"
            sh "docker logout"
          }
        }
      }
    }

    stage('Scan Image with Trivy') {
      steps {
        script {
          sh "trivy image ${IMAGE_NAME}:${IMAGE_TAG} > trivy-report.txt"
        }
      }
    }
    
    stage('Archive Trivy Report') {
      steps {
        archiveArtifacts artifacts: 'trivy-report.txt', onlyIfSuccessful: true
      }
    }

    stage("Deploy Container") {
      steps {
        script {
          // Vérifier si le conteneur existe déjà et le supprimer s'il existe
          def containerExists = sh(script: "docker ps -a --format '{{.Names}}' | grep my_app_container || true", returnStdout: true).trim()
          if (containerExists) {
            sh "docker stop my_app_container"
            sh "docker rm my_app_container"
          }
          // Déployer le nouveau conteneur
          sh "docker run -d --name my_app_container -p 8081:80 ${IMAGE_NAME}:${IMAGE_TAG}"
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
