pipeline {
  agent {
    kubernetes {
      yamlFile 'kaniko-builder.yaml'
    }
  }

  environment {
    APP_NAME = "cyber4aprojecttest"
    RELEASE = "1.0.0"
    DOCKER_USER = "theogrlp4a"
    DOCKER_PASS = 'S3rv3urH@rd3ningPr3Pr0d'
    IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
    IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
    /* JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN") */
  }

  stages {
    stage("Cleanup Workspace") {
      steps {
        cleanWs()
      }
    }

    stage("Checkout from SCM") {
      steps {
        git branch: 'main', credentialsId: 'github', url: 'https://github.com/tgrlp4a/cyber4aprojecttest.git'
      }
    }

    stage('Build & Push with Kaniko') {
      steps {
        container(name: 'kaniko', shell: '/busybox/sh') {
          sh '''#!/busybox/sh
            /kaniko/executor --dockerfile `pwd`/Dockerfile --context `pwd` --destination=${IMAGE_NAME}:${IMAGE_TAG} --destination=${IMAGE_NAME}:latest
          '''
        }
      }
    }

    stage('Deploy with Security Practices') {
      steps {
        script {
          // Créer un réseau Docker si non existant
          sh "docker network ls | grep web_network || docker network create web_network"
          
          // Lancer le conteneur avec les options de sécurité
          sh """
            docker run \\
              --network web_network \\
              --userns-remap=default \\
              --cap-drop=ALL \\
              --cap-add=CAP_NET_BIND_SERVICE \\
              -p 80:8080 \\
              --memory 256m \\
              --memory-swap 512m \\
              --cpus "0.5" \\
              --read-only \\
              //--mount type=tmpfs,destination=/path/to/tmp,tmpfs-size=1000000,tmpfs-mode=1777 \\
              //--mount type=volume,source=my_persistent_data,target=/path/to/persistent \\
              --log-driver=syslog \\
              //--log-opt syslog-address=udp://<adresse_ip_serveur_syslog>:514 \\
              --log-opt tag="conteneur-nginx" \\
              ${IMAGE_NAME}:${IMAGE_TAG}
          """
        }
      }
    }
  }
}
